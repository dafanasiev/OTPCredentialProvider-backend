// Code generated by protoc-gen-go. DO NOT EDIT.
// source: OTPCheckService.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	OTPCheckService.proto

It has these top-level messages:
	CheckRequest
	CheckResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CheckRequest_OTPType int32

const (
	CheckRequest_TOTP CheckRequest_OTPType = 0
)

var CheckRequest_OTPType_name = map[int32]string{
	0: "TOTP",
}
var CheckRequest_OTPType_value = map[string]int32{
	"TOTP": 0,
}

func (x CheckRequest_OTPType) String() string {
	return proto.EnumName(CheckRequest_OTPType_name, int32(x))
}
func (CheckRequest_OTPType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type CheckRequest struct {
	Type  CheckRequest_OTPType `protobuf:"varint,1,opt,name=type,enum=api.CheckRequest_OTPType" json:"type,omitempty"`
	Login string               `protobuf:"bytes,2,opt,name=login" json:"login,omitempty"`
	Code  string               `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
}

func (m *CheckRequest) Reset()                    { *m = CheckRequest{} }
func (m *CheckRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckRequest) ProtoMessage()               {}
func (*CheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CheckRequest) GetType() CheckRequest_OTPType {
	if m != nil {
		return m.Type
	}
	return CheckRequest_TOTP
}

func (m *CheckRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *CheckRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type CheckResponse struct {
}

func (m *CheckResponse) Reset()                    { *m = CheckResponse{} }
func (m *CheckResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckResponse) ProtoMessage()               {}
func (*CheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*CheckRequest)(nil), "api.CheckRequest")
	proto.RegisterType((*CheckResponse)(nil), "api.CheckResponse")
	proto.RegisterEnum("api.CheckRequest_OTPType", CheckRequest_OTPType_name, CheckRequest_OTPType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OTPCheck service

type OTPCheckClient interface {
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
}

type oTPCheckClient struct {
	cc *grpc.ClientConn
}

func NewOTPCheckClient(cc *grpc.ClientConn) OTPCheckClient {
	return &oTPCheckClient{cc}
}

func (c *oTPCheckClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := grpc.Invoke(ctx, "/api.OTPCheck/Check", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OTPCheck service

type OTPCheckServer interface {
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
}

func RegisterOTPCheckServer(s *grpc.Server, srv OTPCheckServer) {
	s.RegisterService(&_OTPCheck_serviceDesc, srv)
}

func _OTPCheck_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTPCheckServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.OTPCheck/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTPCheckServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OTPCheck_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.OTPCheck",
	HandlerType: (*OTPCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _OTPCheck_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "OTPCheckService.proto",
}

func init() { proto.RegisterFile("OTPCheckService.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xf5, 0x0f, 0x09, 0x70,
	0xce, 0x48, 0x4d, 0xce, 0x0e, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0xaa, 0xe1, 0xe2, 0x01, 0x4b, 0x05, 0xa5, 0x16, 0x96,
	0xa6, 0x16, 0x97, 0x08, 0xe9, 0x72, 0xb1, 0x94, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a,
	0xf0, 0x19, 0x49, 0xea, 0x25, 0x16, 0x64, 0xea, 0x21, 0x2b, 0xd0, 0xf3, 0x0f, 0x09, 0x08, 0xa9,
	0x2c, 0x48, 0x0d, 0x02, 0x2b, 0x13, 0x12, 0xe1, 0x62, 0xcd, 0xc9, 0x4f, 0xcf, 0xcc, 0x93, 0x60,
	0x52, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x84, 0x84, 0xb8, 0x58, 0x92, 0xf3, 0x53, 0x52, 0x25,
	0x98, 0xc1, 0x82, 0x60, 0xb6, 0x92, 0x30, 0x17, 0x3b, 0x54, 0xab, 0x10, 0x07, 0x17, 0x4b, 0x88,
	0x7f, 0x48, 0x80, 0x00, 0x83, 0x12, 0x3f, 0x17, 0x2f, 0xd4, 0xf0, 0xe2, 0x82, 0xfc, 0xbc, 0xe2,
	0x54, 0x23, 0x1b, 0x2e, 0x0e, 0x98, 0x63, 0x85, 0x0c, 0xb8, 0x58, 0x21, 0x0c, 0x41, 0x0c, 0x57,
	0x48, 0x09, 0x21, 0x0b, 0x41, 0xf4, 0x2a, 0x31, 0x24, 0xb1, 0x81, 0x3d, 0x66, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0x59, 0x93, 0x64, 0x6f, 0xf1, 0x00, 0x00, 0x00,
}
